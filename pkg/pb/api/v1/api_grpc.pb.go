// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TinkoffServiceClient is the client API for TinkoffService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TinkoffServiceClient interface {
	GetAccounts(ctx context.Context, in *GetAccountsRequest, opts ...grpc.CallOption) (*GetAccountsResponse, error)
}

type tinkoffServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTinkoffServiceClient(cc grpc.ClientConnInterface) TinkoffServiceClient {
	return &tinkoffServiceClient{cc}
}

func (c *tinkoffServiceClient) GetAccounts(ctx context.Context, in *GetAccountsRequest, opts ...grpc.CallOption) (*GetAccountsResponse, error) {
	out := new(GetAccountsResponse)
	err := c.cc.Invoke(ctx, "/tinkoff.v1.TinkoffService/GetAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TinkoffServiceServer is the server API for TinkoffService service.
// All implementations should embed UnimplementedTinkoffServiceServer
// for forward compatibility
type TinkoffServiceServer interface {
	GetAccounts(context.Context, *GetAccountsRequest) (*GetAccountsResponse, error)
}

// UnimplementedTinkoffServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTinkoffServiceServer struct {
}

func (UnimplementedTinkoffServiceServer) GetAccounts(context.Context, *GetAccountsRequest) (*GetAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccounts not implemented")
}

// UnsafeTinkoffServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TinkoffServiceServer will
// result in compilation errors.
type UnsafeTinkoffServiceServer interface {
	mustEmbedUnimplementedTinkoffServiceServer()
}

func RegisterTinkoffServiceServer(s grpc.ServiceRegistrar, srv TinkoffServiceServer) {
	s.RegisterService(&TinkoffService_ServiceDesc, srv)
}

func _TinkoffService_GetAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TinkoffServiceServer).GetAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tinkoff.v1.TinkoffService/GetAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TinkoffServiceServer).GetAccounts(ctx, req.(*GetAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TinkoffService_ServiceDesc is the grpc.ServiceDesc for TinkoffService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TinkoffService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tinkoff.v1.TinkoffService",
	HandlerType: (*TinkoffServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccounts",
			Handler:    _TinkoffService_GetAccounts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/api.proto",
}
